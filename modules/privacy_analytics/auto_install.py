"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –º–æ–¥—É–ª—è Privacy Analytics
"""

import subprocess
import sys
import os
import importlib
from pathlib import Path
from typing import List, Dict, Any, Optional
import logging

# –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ –¥–ª—è pkg_resources
try:
    from importlib.metadata import version
    from importlib.metadata import PackageNotFoundError
except ImportError:
    # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Python
    try:
        from importlib_metadata import version
        from importlib_metadata import PackageNotFoundError
    except ImportError:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º pkg_resources
        import pkg_resources
        def version(package_name):
            try:
                return pkg_resources.get_distribution(package_name).version
            except pkg_resources.DistributionNotFound:
                raise PackageNotFoundError(package_name)
        class PackageNotFoundError(Exception):
            pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DependencyInstaller:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self.module_dir = Path(__file__).parent
        self.requirements_file = self.module_dir / "requirements.txt"
        self.installed_packages = set()
        self.quiet_mode = True  # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        
    def check_package_installed(self, package_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞–∫–µ—Ç"""
        try:
            # –£–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            clean_name = package_name.split('>=')[0].split('==')[0].split('>')[0].split('<')[0]
            importlib.import_module(clean_name)
            return True
        except ImportError:
            return False
    
        def get_package_version(self, package_name: str) -> Optional[str]:
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
            try:
                clean_name = package_name.split('>=')[0].split('==')[0].split('>')[0].split('<')[0]
                return version(clean_name)
            except:
                return None
    
    def install_package(self, package: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
        try:
            if not self.quiet_mode:
                print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞: {package}")
            
            # –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å —Ç–∏—Ö–∏–º —Ä–µ–∂–∏–º–æ–º
            cmd = [sys.executable, "-m", "pip", "install", package]
            if self.quiet_mode:
                cmd.extend(["--quiet", "--disable-pip-version-check"])
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                check=True
            )
            
            if not self.quiet_mode:
                print(f"–ü–∞–∫–µ—Ç {package} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except subprocess.CalledProcessError as e:
            if not self.quiet_mode:
                print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ {package}: {e}")
                print(f"–í—ã–≤–æ–¥: {e.stderr}")
            return False
    
    def install_requirements(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt"""
        if not self.requirements_file.exists():
            if not self.quiet_mode:
                print("–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            if not self.quiet_mode:
                print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt")
            
            # –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å —Ç–∏—Ö–∏–º —Ä–µ–∂–∏–º–æ–º
            cmd = [sys.executable, "-m", "pip", "install", "-r", str(self.requirements_file)]
            if self.quiet_mode:
                cmd.extend(["--quiet", "--disable-pip-version-check"])
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                check=True
            )
            
            if not self.quiet_mode:
                print("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
            
        except subprocess.CalledProcessError as e:
            if not self.quiet_mode:
                print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
                print(f"–í—ã–≤–æ–¥: {e.stderr}")
            return False
    
    def check_and_install_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        if not self.quiet_mode:
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è Privacy Analytics...")
        
        # –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
        critical_deps = [
            "fastapi>=0.104.0",
            "flask>=2.3.0", 
            "pydantic>=2.0.0",
            "sqlalchemy>=2.0.0",
            "psutil>=5.9.0",
            "httpx>=0.25.0",
            "pandas>=2.0.0",
            "numpy>=1.24.0",
            "cryptography>=41.0.0",
            "faker>=19.0.0"
        ]
        
        missing_deps = []
        outdated_deps = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        for dep in critical_deps:
            package_name = dep.split('>=')[0]
            required_version = dep.split('>=')[1] if '>=' in dep else None
            
            if not self.check_package_installed(package_name):
                missing_deps.append(dep)
            elif required_version:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
                current_version = self.get_package_version(package_name)
                if current_version and self.compare_versions(current_version, required_version) < 0:
                    outdated_deps.append(dep)
        
        if not missing_deps and not outdated_deps:
            if not self.quiet_mode:
                print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            return True
        
        if missing_deps:
            if not self.quiet_mode:
                print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {missing_deps}")
        
        if outdated_deps:
            if not self.quiet_mode:
                print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {outdated_deps}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if self.install_requirements():
            if not self.quiet_mode:
                print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        else:
            if not self.quiet_mode:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            return False
    
    def compare_versions(self, version1: str, version2: str) -> int:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –ø–∞–∫–µ—Ç–æ–≤"""
        try:
            v1_parts = [int(x) for x in version1.split('.')]
            v2_parts = [int(x) for x in version2.split('.')]
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã
            max_len = max(len(v1_parts), len(v2_parts))
            v1_parts.extend([0] * (max_len - len(v1_parts)))
            v2_parts.extend([0] * (max_len - len(v2_parts)))
            
            for i in range(max_len):
                if v1_parts[i] < v2_parts[i]:
                    return -1
                elif v1_parts[i] > v2_parts[i]:
                    return 1
            return 0
        except:
            return 0

def auto_install_dependencies(quiet: bool = True) -> bool:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
    try:
        installer = DependencyInstaller()
        installer.quiet_mode = quiet
        return installer.check_and_install_dependencies()
    except Exception as e:
        if not quiet:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False

def manual_install_dependencies() -> bool:
    """–†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    return auto_install_dependencies(quiet=False)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
if __name__ != "__main__":
    auto_install_dependencies()
else:
    # –ó–∞–ø—É—Å–∫ –≤—Ä—É—á–Ω—É—é
    print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è Privacy Analytics")
    success = manual_install_dependencies()
    if success:
        print("üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("üí• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
