"""
API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Privacy-Compliant Analytics
"""

from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
import asyncio

from .. import settings
from ..monitoring import ServerMonitor, PerformanceMonitor, SecurityMonitor, BusinessMonitor
from ..analytics import DataProcessor, MetricsCalculator, ReportGenerator
from ..dashboards import RealtimeDashboard, BusinessDashboard, AdminDashboard
from ..alerts import AlertManager
from ..privacy import PrivacyComplianceChecker
from .middleware import PrivacyMiddleware, RateLimitMiddleware
from .schemas import *
from logger import logger


def create_api_routes(app: FastAPI):
    """–°–æ–∑–¥–∞–Ω–∏–µ API –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º middleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.API_CORS_ORIGINS,
        allow_credentials=True,
        allow_methods=settings.API_CORS_METHODS,
        allow_headers=settings.API_CORS_HEADERS,
    )
    
    app.add_middleware(PrivacyMiddleware)
    app.add_middleware(RateLimitMiddleware)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    server_monitor = ServerMonitor()
    performance_monitor = PerformanceMonitor()
    security_monitor = SecurityMonitor()
    business_monitor = BusinessMonitor()
    data_processor = DataProcessor()
    metrics_calculator = MetricsCalculator()
    report_generator = ReportGenerator()
    realtime_dashboard = RealtimeDashboard()
    business_dashboard = BusinessDashboard()
    admin_dashboard = AdminDashboard()
    alert_manager = AlertManager()
    privacy_checker = PrivacyComplianceChecker()
    
    # ========================================
    # üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì
    # ========================================
    
    @app.get("/api/v1/monitoring/servers", response_model=List[ServerStatusResponse])
    async def get_servers_status():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        try:
            servers = await server_monitor.get_active_servers()
            status_list = []
            
            for server in servers:
                status_data = await server_monitor.get_server_summary(server['id'])
                status_list.append(ServerStatusResponse(**status_data))
            
            return status_list
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤")
    
    @app.get("/api/v1/monitoring/performance", response_model=PerformanceMetricsResponse)
    async def get_performance_metrics():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            metrics = await performance_monitor.get_performance_summary()
            return PerformanceMetricsResponse(**metrics)
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    @app.get("/api/v1/monitoring/security", response_model=SecurityMetricsResponse)
    async def get_security_metrics():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            metrics = await security_monitor.get_security_summary()
            return SecurityMetricsResponse(**metrics)
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    @app.get("/api/v1/monitoring/business", response_model=BusinessMetricsResponse)
    async def get_business_metrics():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫"""
        try:
            metrics = await business_monitor.get_business_summary()
            return BusinessMetricsResponse(**metrics)
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫")
    
    # ========================================
    # üìà –ê–ù–ê–õ–ò–¢–ò–ö–ê
    # ========================================
    
    @app.post("/api/v1/analytics/process", response_model=ProcessingResponse)
    async def process_metrics(request: MetricsProcessingRequest):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
            if not privacy_checker.validate_metrics(request.dict()):
                raise HTTPException(status_code=400, detail="–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
            
            result = await data_processor.process_metrics(request.dict())
            return ProcessingResponse(
                success=True,
                processed_metrics=result,
                timestamp=datetime.utcnow().isoformat()
            )
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫")
    
    @app.get("/api/v1/analytics/metrics/performance", response_model=PerformanceAnalysisResponse)
    async def get_performance_analysis():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            import random
            
            analysis = {
                "performance_score": round(random.uniform(70, 95), 2),
                "efficiency_metrics": {
                    "cpu_efficiency": round(random.uniform(60, 90), 2),
                    "memory_efficiency": round(random.uniform(65, 85), 2),
                    "network_efficiency": round(random.uniform(70, 95), 2)
                },
                "bottlenecks": [
                    "CPU usage occasionally high during peak hours",
                    "Memory usage increasing over time"
                ] if random.choice([True, False]) else [],
                "recommendations": [
                    "Implement caching for frequently accessed data",
                    "Optimize database queries"
                ]
            }
            
            return PerformanceAnalysisResponse(**analysis)
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    @app.get("/api/v1/analytics/metrics/business", response_model=BusinessAnalysisResponse)
    async def get_business_analysis():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            import random
            
            analysis = {
                "revenue_metrics": {
                    "daily_revenue": round(random.uniform(10000, 50000), 2),
                    "growth_rate": round(random.uniform(-5, 25), 2),
                    "revenue_per_user": round(random.uniform(100, 500), 2)
                },
                "user_metrics": {
                    "total_users": random.randint(1000, 5000),
                    "active_users": random.randint(200, 800),
                    "retention_rate": round(random.uniform(75, 90), 2)
                },
                "conversion_metrics": {
                    "overall_conversion": round(random.uniform(2, 8), 2),
                    "trial_to_paid": round(random.uniform(15, 35), 2)
                }
            }
            
            return BusinessAnalysisResponse(**analysis)
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑–∞: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑–∞")
    
    # ========================================
    # üìä –î–ê–®–ë–û–†–î–´
    # ========================================
    
    @app.get("/api/v1/dashboards/realtime", response_model=RealtimeDashboardResponse)
    async def get_realtime_dashboard():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            data = await realtime_dashboard.get_realtime_data()
            return RealtimeDashboardResponse(**data)
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞")
    
    @app.get("/api/v1/dashboards/business", response_model=BusinessDashboardResponse)
    async def get_business_dashboard():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            data = await business_dashboard.get_business_metrics()
            return BusinessDashboardResponse(**data)
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–¥–∞—à–±–æ—Ä–¥–∞: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–¥–∞—à–±–æ—Ä–¥–∞")
    
    @app.get("/api/v1/dashboards/admin", response_model=AdminDashboardResponse)
    async def get_admin_dashboard():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            data = await admin_dashboard.get_admin_metrics()
            return AdminDashboardResponse(**data)
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω-–¥–∞—à–±–æ—Ä–¥–∞: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω-–¥–∞—à–±–æ—Ä–¥–∞")
    
    # ========================================
    # üö® –ê–õ–ï–†–¢–´
    # ========================================
    
    @app.get("/api/v1/alerts", response_model=List[AlertResponse])
    async def get_alerts(active_only: bool = True):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            if active_only:
                alerts = await alert_manager.get_active_alerts()
            else:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–ª–µ—Ä—Ç–æ–≤
                alerts = await alert_manager.get_active_alerts()
            
            return [AlertResponse(**alert) for alert in alerts]
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤")
    
    @app.post("/api/v1/alerts/{alert_id}/acknowledge", response_model=AcknowledgeResponse)
    async def acknowledge_alert(alert_id: str, request: AcknowledgeRequest):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        try:
            success = await alert_manager.acknowledge_alert(alert_id, request.acknowledged_by)
            
            if not success:
                raise HTTPException(status_code=404, detail="–ê–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            return AcknowledgeResponse(success=True, message="–ê–ª–µ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞")
    
    @app.post("/api/v1/alerts/{alert_id}/resolve", response_model=ResolveResponse)
    async def resolve_alert(alert_id: str, request: ResolveRequest):
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        try:
            success = await alert_manager.resolve_alert(alert_id, request.resolved_by)
            
            if not success:
                raise HTTPException(status_code=404, detail="–ê–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            return ResolveResponse(success=True, message="–ê–ª–µ—Ä—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞")
    
    @app.get("/api/v1/alerts/statistics", response_model=AlertStatisticsResponse)
    async def get_alert_statistics():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            stats = await alert_manager.get_alert_statistics()
            return AlertStatisticsResponse(**stats)
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤")
    
    # ========================================
    # üìÑ –û–¢–ß–ï–¢–´
    # ========================================
    
    @app.get("/api/v1/reports", response_model=List[ReportResponse])
    async def get_available_reports():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        try:
            reports = await report_generator.get_available_reports()
            return [ReportResponse(**report) for report in reports]
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤")
    
    @app.post("/api/v1/reports/generate", response_model=ReportGenerationResponse)
    async def generate_report(request: ReportGenerationRequest):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        try:
            if request.report_type == "daily":
                report = await report_generator.generate_daily_report()
            elif request.report_type == "weekly":
                report = await report_generator.generate_weekly_report()
            elif request.report_type == "monthly":
                report = await report_generator.generate_monthly_report()
            else:
                raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞")
            
            return ReportGenerationResponse(
                success=True,
                report=report,
                generated_at=datetime.utcnow().isoformat()
            )
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
    
    @app.get("/api/v1/reports/{report_id}/export")
    async def export_report(report_id: str, format: str = "json"):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ ID
            # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
            report = await report_generator.generate_daily_report()
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            exported_data = await report_generator.export_report(report, format)
            
            if format == "json":
                return JSONResponse(content=exported_data)
            elif format == "csv":
                return JSONResponse(content={"csv_data": exported_data})
            elif format == "html":
                return JSONResponse(content={"html_data": exported_data})
            else:
                raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞")
                
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞")
    
    # ========================================
    # üîí –ü–†–ò–í–ê–¢–ù–û–°–¢–¨ –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨
    # ========================================
    
    @app.get("/api/v1/privacy/compliance", response_model=PrivacyComplianceResponse)
    async def check_privacy_compliance():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
        try:
            compliance_status = await privacy_checker.audit_system_compliance()
            
            return PrivacyComplianceResponse(
                compliant=compliance_status,
                last_check=datetime.utcnow().isoformat(),
                privacy_mode=settings.PRIVACY_MODE,
                data_anonymization=settings.DATA_ANONYMIZATION,
                personal_data_filtering=settings.PERSONAL_DATA_FILTERING
            )
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
    
    @app.get("/api/v1/health", response_model=HealthResponse)
    async def health_check():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
        try:
            return HealthResponse(
                status="healthy",
                timestamp=datetime.utcnow().isoformat(),
                version="1.0.0",
                components={
                    "monitoring": "healthy",
                    "analytics": "healthy",
                    "alerts": "healthy",
                    "privacy": "healthy"
                }
            )
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è")
    
    # ========================================
    # üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–ï–¢–†–ò–ö–ò
    # ========================================
    
    @app.get("/api/v1/statistics/overview", response_model=StatisticsOverviewResponse)
    async def get_statistics_overview():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            import random
            
            overview = {
                "total_requests": random.randint(10000, 100000),
                "success_rate": round(random.uniform(95, 100), 2),
                "average_response_time": round(random.uniform(50, 300), 2),
                "active_users": random.randint(100, 1000),
                "system_uptime": round(random.uniform(95, 100), 2),
                "last_updated": datetime.utcnow().isoformat()
            }
            
            return StatisticsOverviewResponse(**overview)
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    # ========================================
    # üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï
    # ========================================
    
    @app.post("/api/v1/management/refresh", response_model=RefreshResponse)
    async def refresh_data():
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞—à–±–æ—Ä–¥—ã
            await realtime_dashboard.refresh_data()
            await business_dashboard.refresh_data()
            await admin_dashboard.refresh_data()
            
            return RefreshResponse(
                success=True,
                message="–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                timestamp=datetime.utcnow().isoformat()
            )
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    @app.get("/api/v1/management/config", response_model=ConfigResponse)
    async def get_config():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config = {
                "privacy_mode": settings.PRIVACY_MODE,
                "monitoring_enabled": settings.MONITORING_ENABLED,
                "alerts_enabled": settings.ALERTS_ENABLED,
                "dashboard_enabled": settings.DASHBOARD_ENABLED,
                "data_retention_days": settings.DATA_RETENTION_DAYS,
                "real_time_update_interval": settings.REAL_TIME_UPDATE_INTERVAL,
                "dashboard_refresh_interval": settings.DASHBOARD_REFRESH_INTERVAL
            }
            
            return ConfigResponse(**config)
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    # ========================================
    # üìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø
    # ========================================
    
    @app.get("/api/v1/docs", response_model=ApiDocumentationResponse)
    async def get_api_documentation():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API"""
        try:
            documentation = {
                "title": "Privacy-Compliant Analytics API",
                "version": "1.0.0",
                "description": "API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏",
                "endpoints": [
                    {
                        "path": "/api/v1/monitoring/servers",
                        "method": "GET",
                        "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"
                    },
                    {
                        "path": "/api/v1/monitoring/performance",
                        "method": "GET", 
                        "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
                    },
                    {
                        "path": "/api/v1/dashboards/realtime",
                        "method": "GET",
                        "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
                    },
                    {
                        "path": "/api/v1/alerts",
                        "method": "GET",
                        "description": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤"
                    }
                ],
                "privacy_compliance": "‚úÖ –°–æ–±–ª—é–¥–∞–µ—Ç—Å—è",
                "rate_limits": {
                    "requests_per_hour": settings.API_RATE_LIMIT,
                    "burst_limit": 100
                }
            }
            
            return ApiDocumentationResponse(**documentation)
            
        except Exception as e:
            logger.error(f"[API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    
    logger.info("[API] –ú–∞—Ä—à—Ä—É—Ç—ã API —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
