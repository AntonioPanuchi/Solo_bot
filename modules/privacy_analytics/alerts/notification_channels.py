"""
–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
"""

import asyncio
import aiohttp
from datetime import datetime
from typing import Dict, List, Any, Optional

from .. import settings
from logger import logger


class NotificationChannels:
    """–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        self.telegram_enabled = settings.TELEGRAM_ALERTS_ENABLED
        self.email_enabled = settings.EMAIL_ALERTS_ENABLED
        self.webhook_enabled = settings.WEBHOOK_ALERTS_ENABLED
        
    async def send_telegram_alert(self, alert: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ Telegram"""
        try:
            if not self.telegram_enabled:
                return False
            
            chat_id = settings.TELEGRAM_ALERT_CHAT_ID
            bot_token = settings.TELEGRAM_ALERT_BOT_TOKEN
            
            if not chat_id or not bot_token:
                logger.warning("[Notification Channels] Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.format_telegram_message(alert)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        logger.info(f"[Notification Channels] Telegram –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert['id']}")
                        return True
                    else:
                        logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {response.status}")
                        return False
                        
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –∞–ª–µ—Ä—Ç–∞: {e}")
            return False
    
    async def send_email_alert(self, alert: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ email"""
        try:
            if not self.email_enabled:
                return False
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
            # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"[Notification Channels] Email –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert['id']}")
            return True
            
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∞–ª–µ—Ä—Ç–∞: {e}")
            return False
    
    async def send_webhook_alert(self, alert: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ webhook"""
        try:
            if not self.webhook_enabled:
                return False
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook
            # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"[Notification Channels] Webhook –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert['id']}")
            return True
            
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook –∞–ª–µ—Ä—Ç–∞: {e}")
            return False
    
    def format_telegram_message(self, alert: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
        try:
            severity_emoji = {
                "critical": "üî¥",
                "warning": "üü°", 
                "info": "üîµ"
            }.get(alert.get("severity", "info"), "‚ö™")
            
            message = f"""
{severity_emoji} <b>–ê–ª–µ—Ä—Ç: {alert.get('rule_name', 'Unknown')}</b>

üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {alert.get('message', 'No message')}
‚è∞ <b>–í—Ä–µ–º—è:</b> {alert.get('timestamp', 'Unknown')}
üî¢ <b>ID:</b> {alert.get('id', 'Unknown')}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {alert.get('status', 'Unknown')}

#alert #{alert.get('severity', 'unknown')}
            """.strip()
            
            return message
            
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return f"–ê–ª–µ—Ä—Ç: {alert.get('message', 'Unknown')}"
    
    def format_email_message(self, alert: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è email"""
        try:
            message = f"""
–ê–ª–µ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

–ü—Ä–∞–≤–∏–ª–æ: {alert.get('rule_name', 'Unknown')}
–°–æ–æ–±—â–µ–Ω–∏–µ: {alert.get('message', 'No message')}
–í—Ä–µ–º—è: {alert.get('timestamp', 'Unknown')}
ID: {alert.get('id', 'Unknown')}
–°—Ç–∞—Ç—É—Å: {alert.get('status', 'Unknown')}
–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {alert.get('severity', 'Unknown')}

---
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            """.strip()
            
            return message
            
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return f"–ê–ª–µ—Ä—Ç: {alert.get('message', 'Unknown')}"
    
    def format_webhook_payload(self, alert: Dict[str, Any]) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ payload –¥–ª—è webhook"""
        try:
            payload = {
                "alert_id": alert.get("id"),
                "rule_name": alert.get("rule_name"),
                "severity": alert.get("severity"),
                "message": alert.get("message"),
                "timestamp": alert.get("timestamp"),
                "status": alert.get("status"),
                "metrics": alert.get("metrics", {}),
                "escalation_level": alert.get("escalation_level", 1),
                "acknowledged": alert.get("acknowledged", False),
                "resolved": alert.get("resolved", False)
            }
            
            return payload
            
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook payload: {e}")
            return {"error": "Failed to format webhook payload"}
    
    async def test_telegram_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        try:
            if not self.telegram_enabled:
                return False
            
            chat_id = settings.TELEGRAM_ALERT_CHAT_ID
            bot_token = settings.TELEGRAM_ALERT_BOT_TOKEN
            
            if not chat_id or not bot_token:
                return False
            
            url = f"https://api.telegram.org/bot{bot_token}/getMe"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    return response.status == 200
                    
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {e}")
            return False
    
    async def test_email_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ email"""
        try:
            if not self.email_enabled:
                return False
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email
            return True
            
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email: {e}")
            return False
    
    async def test_webhook_connection(self, webhook_url: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ webhook"""
        try:
            if not self.webhook_enabled:
                return False
            
            test_payload = {
                "test": True,
                "timestamp": datetime.utcnow().isoformat()
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(webhook_url, json=test_payload) as response:
                    return response.status in [200, 201, 202]
                    
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook: {e}")
            return False
    
    async def get_channel_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            status = {
                "telegram": {
                    "enabled": self.telegram_enabled,
                    "configured": bool(settings.TELEGRAM_ALERT_CHAT_ID and settings.TELEGRAM_ALERT_BOT_TOKEN),
                    "test_result": await self.test_telegram_connection() if self.telegram_enabled else False
                },
                "email": {
                    "enabled": self.email_enabled,
                    "configured": bool(settings.EMAIL_ALERT_SMTP_SERVER and settings.EMAIL_ALERT_USERNAME),
                    "test_result": await self.test_email_connection() if self.email_enabled else False
                },
                "webhook": {
                    "enabled": self.webhook_enabled,
                    "configured": True,  # Webhook –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
                    "test_result": None  # –¢—Ä–µ–±—É–µ—Ç URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                }
            }
            
            return status
            
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return {}
    
    async def send_bulk_notifications(self, alerts: List[Dict[str, Any]], channel: str) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            results = {
                "total": len(alerts),
                "success": 0,
                "failed": 0,
                "errors": []
            }
            
            for alert in alerts:
                try:
                    if channel == "telegram":
                        success = await self.send_telegram_alert(alert)
                    elif channel == "email":
                        success = await self.send_email_alert(alert)
                    elif channel == "webhook":
                        success = await self.send_webhook_alert(alert)
                    else:
                        success = False
                        results["errors"].append(f"Unknown channel: {channel}")
                    
                    if success:
                        results["success"] += 1
                    else:
                        results["failed"] += 1
                        
                except Exception as e:
                    results["failed"] += 1
                    results["errors"].append(f"Error sending alert {alert.get('id', 'unknown')}: {str(e)}")
            
            return results
            
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return {"total": 0, "success": 0, "failed": 0, "errors": [str(e)]}
    
    async def send_digest_notification(self, alerts: List[Dict[str, Any]], channel: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            if not alerts:
                return True
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
            critical_alerts = [a for a in alerts if a.get("severity") == "critical"]
            warning_alerts = [a for a in alerts if a.get("severity") == "warning"]
            info_alerts = [a for a in alerts if a.get("severity") == "info"]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if channel == "telegram":
                message = self.format_telegram_digest(critical_alerts, warning_alerts, info_alerts)
                return await self.send_telegram_message(message)
            elif channel == "email":
                message = self.format_email_digest(critical_alerts, warning_alerts, info_alerts)
                return await self.send_email_message("–°–≤–æ–¥–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤", message)
            else:
                return False
                
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def format_telegram_digest(self, critical: List, warning: List, info: List) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
        try:
            message = f"""
üìä <b>–°–≤–æ–¥–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤</b>

üî¥ <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ:</b> {len(critical)}
üü° <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b> {len(warning)}
üîµ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ:</b> {len(info)}

<b>–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤:</b> {len(critical) + len(warning) + len(info)}
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}

#alerts #summary
            """.strip()
            
            return message
            
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ Telegram: {e}")
            return "–°–≤–æ–¥–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    def format_email_digest(self, critical: List, warning: List, info: List) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è email"""
        try:
            message = f"""
–°–≤–æ–¥–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {len(critical)}
–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(warning)}
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ: {len(info)}

–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(critical) + len(warning) + len(info)}
–í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}

---
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            """.strip()
            
            return message
            
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ email: {e}")
            return "–°–≤–æ–¥–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    async def send_telegram_message(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            if not self.telegram_enabled:
                return False
            
            chat_id = settings.TELEGRAM_ALERT_CHAT_ID
            bot_token = settings.TELEGRAM_ALERT_BOT_TOKEN
            
            if not chat_id or not bot_token:
                return False
            
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    return response.status == 200
                    
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def send_email_message(self, subject: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ email"""
        try:
            if not self.email_enabled:
                return False
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
            logger.info(f"[Notification Channels] Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {subject}")
            return True
            
        except Exception as e:
            logger.error(f"[Notification Channels] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return False
