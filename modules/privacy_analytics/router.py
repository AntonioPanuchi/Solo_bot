"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –º–æ–¥—É–ª—è Privacy-Compliant Analytics & Monitoring
"""

import asyncio
import threading
from datetime import datetime
from typing import Dict, Any

from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from fastapi import FastAPI
from hooks.hooks import register_hook

from . import settings
from .monitoring import ServerMonitor, PerformanceMonitor, SecurityMonitor
from .analytics import DataProcessor, ReportGenerator
from .dashboards import RealtimeDashboard, BusinessDashboard
from .alerts import AlertManager
from .api import create_api_routes
from .privacy import PrivacyComplianceChecker
from logger import logger


# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
router = Router(name="privacy_analytics_module")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
server_monitor = ServerMonitor()
performance_monitor = PerformanceMonitor()
security_monitor = SecurityMonitor()
data_processor = DataProcessor()
report_generator = ReportGenerator()
realtime_dashboard = RealtimeDashboard()
business_dashboard = BusinessDashboard()
alert_manager = AlertManager()
privacy_checker = PrivacyComplianceChecker()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
app = FastAPI(
    title="Privacy-Compliant Analytics Dashboard",
    version="1.0.0",
    description="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"
)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º API –º–∞—Ä—à—Ä—É—Ç—ã
create_api_routes(app)

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_monitoring():
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if not settings.MONITORING_ENABLED:
        return
    
    async def monitoring_loop():
        while True:
            try:
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤
                if settings.SERVER_MONITORING_INTERVAL > 0:
                    await server_monitor.collect_all_metrics()
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if settings.PERFORMANCE_METRICS_INTERVAL > 0:
                    await performance_monitor.collect_performance_metrics()
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if settings.SECURITY_MONITORING_INTERVAL > 0:
                    await security_monitor.monitor_security_events()
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                await data_processor.process_queued_metrics()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
                if settings.ALERTS_ENABLED:
                    await alert_manager.check_all_alerts()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(min(
                    settings.SERVER_MONITORING_INTERVAL,
                    settings.PERFORMANCE_METRICS_INTERVAL,
                    settings.SECURITY_MONITORING_INTERVAL
                ))
                
            except Exception as e:
                logger.error(f"[Privacy Analytics] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(monitoring_loop())

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
if settings.MONITORING_ENABLED:
    monitoring_thread = threading.Thread(target=start_monitoring, daemon=True)
    monitoring_thread.start()
    logger.info("[Privacy Analytics] –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")

# –§—É–Ω–∫—Ü–∏–∏ —Ö—É–∫–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
async def admin_panel_hook(admin_role: str, **kwargs) -> list:
    """–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not settings.ANALYTICS_ENABLED:
        return []
    
    buttons = []
    
    if admin_role in ["superadmin", "admin"]:
        buttons.append({
            "button": InlineKeyboardButton(
                text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
                callback_data="privacy_analytics:dashboard"
            )
        })
        
        buttons.append({
            "button": InlineKeyboardButton(
                text="üìà –û—Ç—á–µ—Ç—ã",
                callback_data="privacy_analytics:reports"
            )
        })
        
        buttons.append({
            "button": InlineKeyboardButton(
                text="üö® –ê–ª–µ—Ä—Ç—ã",
                callback_data="privacy_analytics:alerts"
            )
        })
    
    return buttons

async def system_startup_hook(**kwargs):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
    if settings.ANALYTICS_ENABLED:
        logger.info("[Privacy Analytics] –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
        if settings.AUDIT_PRIVACY_COMPLIANCE:
            compliance_status = await privacy_checker.audit_system_compliance()
            if not compliance_status:
                logger.warning("[Privacy Analytics] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—É–∫–∏
register_hook("admin_panel", admin_panel_hook)
register_hook("system_startup", system_startup_hook)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.callback_query(lambda c: c.data.startswith("privacy_analytics:"))
async def handle_analytics_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    action = callback.data.split(":")[1]
    
    if action == "dashboard":
        await show_dashboard(callback)
    elif action == "reports":
        await show_reports(callback)
    elif action == "alerts":
        await show_alerts(callback)
    elif action == "settings":
        await show_settings(callback)
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

async def show_dashboard(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–∞—à–±–æ—Ä–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        dashboard_data = await realtime_dashboard.get_realtime_data()
        business_data = await business_dashboard.get_business_metrics()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="privacy_analytics:dashboard")
        builder.button(text="üìà –ë–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏", callback_data="privacy_analytics:business")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="privacy_analytics:settings")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel:admin:1")
        builder.adjust(2, 1, 1)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""üìä **–î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏**

üîó **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** {dashboard_data.get('active_connections', 'N/A')}
üíæ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞:** {dashboard_data.get('bandwidth_usage', 'N/A')} GB
‚ö° **–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã:** {dashboard_data.get('system_health', 'N/A')}%
üí∞ **–í—ã—Ä—É—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è:** {business_data.get('daily_revenue', 'N/A')} ‚ÇΩ

üõ°Ô∏è **–°—Ç–∞—Ç—É—Å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:** ‚úÖ –°–æ–±–ª—é–¥–∞–µ—Ç—Å—è
üìä **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.now().strftime('%H:%M:%S')}"""
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"[Privacy Analytics] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞")

async def show_reports(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        reports = await report_generator.get_available_reports()
        
        builder = InlineKeyboardBuilder()
        for report in reports:
            builder.button(
                text=f"üìÑ {report['name']}",
                callback_data=f"privacy_analytics:report:{report['id']}"
            )
        
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="privacy_analytics:dashboard")
        builder.adjust(1)
        
        message = "üìà **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"[Privacy Analytics] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ—Ç—á–µ—Ç–æ–≤: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–æ–≤")

async def show_alerts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
        alerts = await alert_manager.get_active_alerts()
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="privacy_analytics:alerts")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤", callback_data="privacy_analytics:alert_settings")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="privacy_analytics:dashboard")
        builder.adjust(1)
        
        if alerts:
            alert_text = "üö® **–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã**\n\n"
            for alert in alerts[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                severity_emoji = {"critical": "üî¥", "warning": "üü°", "info": "üîµ"}.get(alert['severity'], "‚ö™")
                alert_text += f"{severity_emoji} {alert['message']}\n"
        else:
            alert_text = "‚úÖ **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤**\n\n–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
        
        await callback.message.edit_text(
            text=alert_text,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"[Privacy Analytics] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–ª–µ—Ä—Ç–æ–≤")

async def show_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥—É–ª—è"""
    try:
        builder = InlineKeyboardBuilder()
        builder.button(text="üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏", callback_data="privacy_analytics:privacy_settings")
        builder.button(text="üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", callback_data="privacy_analytics:monitoring_settings")
        builder.button(text="üö® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤", callback_data="privacy_analytics:alert_settings")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="privacy_analytics:dashboard")
        builder.adjust(1)
        
        message = f"""‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏**

üîí **–†–µ–∂–∏–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:** {settings.PRIVACY_MODE}
üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** {'‚úÖ –í–∫–ª—é—á–µ–Ω' if settings.MONITORING_ENABLED else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}
üö® **–ê–ª–µ—Ä—Ç—ã:** {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.ALERTS_ENABLED else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}
üìà **–î–∞—à–±–æ—Ä–¥:** {'‚úÖ –í–∫–ª—é—á–µ–Ω' if settings.DASHBOARD_ENABLED else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}

üõ°Ô∏è **–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:** ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ"""
        
        await callback.message.edit_text(
            text=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"[Privacy Analytics] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
def get_webhook_data():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞"""
    return {
        "path": "/analytics/webhook",
        "handler": handle_webhook
    }

async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤"""
    try:
        data = await request.json()
        logger.info(f"[Privacy Analytics] –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: {data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        if data.get("type") == "metrics":
            await data_processor.process_external_metrics(data)
        elif data.get("type") == "alert":
            await alert_manager.process_external_alert(data)
        
        return {"status": "success"}
        
    except Exception as e:
        logger.error(f"[Privacy Analytics] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error", "message": str(e)}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–ª–æ—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
def get_fast_flow_handler():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–ª–æ—É (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)"""
    return None  # –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±—ã—Å—Ç—Ä—ã–π —Ñ–ª–æ—É
