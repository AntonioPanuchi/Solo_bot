"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –º–æ–¥—É–ª—è Privacy Analytics
"""

import subprocess
import sys
import os
import importlib
import pkg_resources
import json
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class DependencyManager:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self.module_dir = Path(__file__).parent
        self.requirements_file = self.module_dir / "requirements.txt"
        self.lock_file = self.module_dir / "requirements.lock"
        self.dependency_cache = self.module_dir / ".dependency_cache.json"
        self.installed_packages = {}
        self.load_cache()
    
    def load_cache(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            if self.dependency_cache.exists():
                with open(self.dependency_cache, 'r', encoding='utf-8') as f:
                    cache_data = json.load(f)
                    self.installed_packages = cache_data.get('packages', {})
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            self.installed_packages = {}
    
    def save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            cache_data = {
                'packages': self.installed_packages,
                'last_updated': datetime.now().isoformat(),
                'python_version': sys.version
            }
            with open(self.dependency_cache, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
    
    def get_installed_packages(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
        try:
            result = subprocess.run(
                [sys.executable, "-m", "pip", "list", "--format=json"],
                capture_output=True,
                text=True,
                check=True
            )
            packages = json.loads(result.stdout)
            return {pkg['name']: pkg['version'] for pkg in packages}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: {e}")
            return {}
    
    def check_dependency(self, package_spec: str) -> Tuple[bool, Optional[str], Optional[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å –≤–µ—Ä—Å–∏–µ–π"""
        try:
            # –ü–∞—Ä—Å–∏–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–∞–∫–µ—Ç–∞
            if '>=' in package_spec:
                name, required_version = package_spec.split('>=')
            elif '==' in package_spec:
                name, required_version = package_spec.split('==')
            elif '>' in package_spec:
                name, required_version = package_spec.split('>')
            elif '<' in package_spec:
                name, required_version = package_spec.split('<')
            else:
                name = package_spec
                required_version = None
            
            name = name.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞–∫–µ—Ç
            try:
                importlib.import_module(name)
                installed_version = pkg_resources.get_distribution(name).version
                
                if required_version:
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
                    if self.compare_versions(installed_version, required_version) >= 0:
                        return True, installed_version, required_version
                    else:
                        return False, installed_version, required_version
                else:
                    return True, installed_version, None
                    
            except ImportError:
                return False, None, required_version
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ {package_spec}: {e}")
            return False, None, None
    
    def compare_versions(self, version1: str, version2: str) -> int:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –ø–∞–∫–µ—Ç–æ–≤"""
        try:
            def normalize_version(version):
                return [int(x) for x in version.split('.')]
            
            v1_parts = normalize_version(version1)
            v2_parts = normalize_version(version2)
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã
            max_len = max(len(v1_parts), len(v2_parts))
            v1_parts.extend([0] * (max_len - len(v1_parts)))
            v2_parts.extend([0] * (max_len - len(v2_parts)))
            
            for i in range(max_len):
                if v1_parts[i] < v2_parts[i]:
                    return -1
                elif v1_parts[i] > v2_parts[i]:
                    return 1
            return 0
        except:
            return 0
    
    def install_dependency(self, package_spec: str, quiet: bool = True) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–¥–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        try:
            if not quiet:
                print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞: {package_spec}")
            
            cmd = [sys.executable, "-m", "pip", "install", package_spec]
            if quiet:
                cmd.extend(["--quiet", "--disable-pip-version-check"])
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                check=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            name = package_spec.split('>=')[0].split('==')[0].split('>')[0].split('<')[0].strip()
            try:
                version = pkg_resources.get_distribution(name).version
                self.installed_packages[name] = version
            except:
                pass
            
            return True
            
        except subprocess.CalledProcessError as e:
            if not quiet:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package_spec}: {e}")
                print(f"–í—ã–≤–æ–¥: {e.stderr}")
            return False
    
    def install_from_requirements(self, quiet: bool = True) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ requirements.txt"""
        if not self.requirements_file.exists():
            if not quiet:
                print("‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            if not quiet:
                print("üìã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ requirements.txt")
            
            cmd = [sys.executable, "-m", "pip", "install", "-r", str(self.requirements_file)]
            if quiet:
                cmd.extend(["--quiet", "--disable-pip-version-check"])
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                check=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.installed_packages = self.get_installed_packages()
            self.save_cache()
            
            return True
            
        except subprocess.CalledProcessError as e:
            if not quiet:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ requirements.txt: {e}")
                print(f"–í—ã–≤–æ–¥: {e.stderr}")
            return False
    
    def check_all_dependencies(self, quiet: bool = True) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        if not self.requirements_file.exists():
            return {"error": "–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        try:
            with open(self.requirements_file, 'r', encoding='utf-8') as f:
                requirements = [line.strip() for line in f if line.strip() and not line.startswith('#')]
            
            results = {
                "total": len(requirements),
                "installed": 0,
                "missing": 0,
                "outdated": 0,
                "packages": {}
            }
            
            for req in requirements:
                is_installed, installed_ver, required_ver = self.check_dependency(req)
                
                package_name = req.split('>=')[0].split('==')[0].split('>')[0].split('<')[0].strip()
                
                if is_installed:
                    results["installed"] += 1
                    status = "installed"
                    if required_ver and installed_ver != required_ver:
                        status = "outdated"
                        results["outdated"] += 1
                else:
                    results["missing"] += 1
                    status = "missing"
                
                results["packages"][package_name] = {
                    "specification": req,
                    "status": status,
                    "installed_version": installed_ver,
                    "required_version": required_ver
                }
            
            return results
            
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}"}
    
    def auto_install_dependencies(self, quiet: bool = True) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            if not quiet:
                print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è Privacy Analytics...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            check_results = self.check_all_dependencies(quiet)
            
            if "error" in check_results:
                if not quiet:
                    print(f"‚ùå {check_results['error']}")
                return False
            
            if check_results["missing"] == 0 and check_results["outdated"] == 0:
                if not quiet:
                    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                return True
            
            if not quiet:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ: {check_results['missing']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö, {check_results['outdated']} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if self.install_from_requirements(quiet):
                if not quiet:
                    print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return True
            else:
                if not quiet:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
                return False
                
        except Exception as e:
            if not quiet:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False
    
    def create_lock_file(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ lock —Ñ–∞–π–ª–∞ —Å —Ç–æ—á–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏"""
        try:
            installed = self.get_installed_packages()
            
            with open(self.lock_file, 'w', encoding='utf-8') as f:
                f.write("# Lock file for Privacy Analytics module\n")
                f.write(f"# Generated: {datetime.now().isoformat()}\n")
                f.write(f"# Python: {sys.version}\n\n")
                
                for name, version in sorted(installed.items()):
                    f.write(f"{name}=={version}\n")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è lock —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def install_from_lock_file(self, quiet: bool = True) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ lock —Ñ–∞–π–ª–∞"""
        if not self.lock_file.exists():
            if not quiet:
                print("‚ùå Lock —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            if not quiet:
                print("üîí –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑ lock —Ñ–∞–π–ª–∞")
            
            cmd = [sys.executable, "-m", "pip", "install", "-r", str(self.lock_file)]
            if quiet:
                cmd.extend(["--quiet", "--disable-pip-version-check"])
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                check=True
            )
            
            return True
            
        except subprocess.CalledProcessError as e:
            if not quiet:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ lock —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def cleanup_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            if self.dependency_cache.exists():
                self.dependency_cache.unlink()
            if self.lock_file.exists():
                self.lock_file.unlink()
            print("üßπ –ö—ç—à –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—á–∏—â–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Privacy Analytics")
    parser.add_argument("--check", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    parser.add_argument("--install", action="store_true", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    parser.add_argument("--lock", action="store_true", help="–°–æ–∑–¥–∞—Ç—å lock —Ñ–∞–π–ª")
    parser.add_argument("--install-lock", action="store_true", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ lock —Ñ–∞–π–ª–∞")
    parser.add_argument("--cleanup", action="store_true", help="–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    
    args = parser.parse_args()
    
    manager = DependencyManager()
    quiet = not args.verbose
    
    if args.check:
        results = manager.check_all_dependencies(quiet)
        if "error" in results:
            print(f"‚ùå {results['error']}")
        else:
            print(f"üìä –í—Å–µ–≥–æ: {results['total']}, –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {results['installed']}, –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {results['missing']}, –£—Å—Ç–∞—Ä–µ–ª–æ: {results['outdated']}")
    
    elif args.install:
        success = manager.auto_install_dependencies(quiet)
        sys.exit(0 if success else 1)
    
    elif args.lock:
        success = manager.create_lock_file()
        print("‚úÖ Lock —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω" if success else "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è lock —Ñ–∞–π–ª–∞")
    
    elif args.install_lock:
        success = manager.install_from_lock_file(quiet)
        sys.exit(0 if success else 1)
    
    elif args.cleanup:
        manager.cleanup_cache()
    
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
        success = manager.auto_install_dependencies(quiet)
        sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
